#!/usr/bin/env python
# coding: utf-8

# In[2]:


import cvxpy as cp


x = cp.Variable(20, boolean = True) # each nonconfrence team

y = cp.Variable(17, boolean = True) # each conference opponent

w = cp.Variable(2, boolean = True) # 1 if enough criteria for top 4, 0 if only top 12



obj_func = 0.18*w[0] + 0.125*w[1]

constraints = []

constraints.append(w[0] + w[1] == 1) # either criteria for top 4 or top 12

constraints.append(x[0]+x[1]+x[2]+x[3]+x[4]+x[5]+x[6]+x[7]+x[8]+x[9]+x[10]+x[11]+x[12]+x[13]+x[14]+x[15]+x[16]+x[17]+x[18]+x[19] == 3)
constraints.append(y[0]+y[1]+y[2]+y[3]+y[4]+y[5]+y[6]+y[7]+y[8]+y[9]+y[10]+y[11]+y[12]+y[13]+y[14]+y[15]+y[16] == 9)


constraints.append(0.5*y[0]+0.6*y[1]+0.61*y[2]+0.62*y[3]+0.78*y[4]+0.84*y[5]+0.87*y[6]+0.88*y[7]
                   +0.88*y[8]+0.92*y[9]+0.92*y[10]+0.93*y[11]+0.93*y[12]+0.93*y[13]+0.94*y[14]+0.98*y[15]+0.99*y[16] >= 7.858*w[0])

constraints.append(2.769*x[0]+2.961*x[1]+2.881*x[2]+2.625*x[3]+2.496*x[4]+2.296*x[5]+2.184*x[6]+2.064*x[7]+2.001*x[8]+1.936*x[9]
                   +1.8*x[10]+1.729*x[11]+1.656*x[12]+1.581*x[13]+1.504*x[14]+1.425*x[15]+1.261*x[16]+1.176*x[17]+1.089*x[18]+1*x[19]
                 + 3*y[0]+3*y[1]+2.989*y[2]+2.976*y[3]+2.496*y[4]+2.184*y[5]+2.001*y[6]+1.936*y[7]+1.936*y[8]+1.656*y[9]+1.656*y[10]
                   +1.581*y[11]+1.581*y[12]+1.581*y[13]+1.504*y[14]+1.176*y[15]+1.089*y[16] >= 21.349*w[0])

constraints.append(0.5*y[0]+0.6*y[1]+0.61*y[2]+0.62*y[3]+0.78*y[4]+0.84*y[5]+0.87*y[6]+0.88*y[7]
                   +0.88*y[8]+0.92*y[9]+0.92*y[10]+0.93*y[11]+0.93*y[12]+0.93*y[13]+0.94*y[14]+0.98*y[15]+0.99*y[16]
                    + 0.39*x[0]+0.63*x[1]+0.67*x[2]+0.75*x[3]+0.78*x[4]+0.82*x[5]+0.84*x[6]+0.86*x[7]+0.87*x[8]+0.88*x[9]+0.9*x[10]
                    +0.91*x[11]+0.92*x[12]+0.93*x[13]+0.94*x[14]+0.95*x[15]+0.97*x[16]+0.98*x[17]+0.99*x[18]+1*x[19] 
                    >= 10.325*w[0])

constraints.append(2.769*x[0]+2.961*x[1]+2.881*x[2]+2.625*x[3]+2.496*x[4]+2.296*x[5]+2.184*x[6]+2.064*x[7]+2.001*x[8]+1.936*x[9]
                   +1.8*x[10]+1.729*x[11]+1.656*x[12]+1.581*x[13]+1.504*x[14]+1.425*x[15]+1.261*x[16]+1.176*x[17]+1.089*x[18]+1*x[19]
                 + 3*y[0]+3*y[1]+2.989*y[2]+2.976*y[3]+2.496*y[4]+2.184*y[5]+2.001*y[6]+1.936*y[7]+1.936*y[8]+1.656*y[9]+1.656*y[10]
                   +1.581*y[11]+1.581*y[12]+1.581*y[13]+1.504*y[14]+1.176*y[15]+1.089*y[16] >= 25*w[1])

constraints.append(0.5*y[0]+0.6*y[1]+0.61*y[2]+0.62*y[3]+0.78*y[4]+0.84*y[5]+0.87*y[6]+0.88*y[7]
                   +0.88*y[8]+0.92*y[9]+0.92*y[10]+0.93*y[11]+0.93*y[12]+0.93*y[13]+0.94*y[14]+0.98*y[15]+0.99*y[16]
                    + 0.39*x[0]+0.63*x[1]+0.67*x[2]+0.75*x[3]+0.78*x[4]+0.82*x[5]+0.84*x[6]+0.86*x[7]+0.87*x[8]+0.88*x[9]+0.9*x[10]
                    +0.91*x[11]+0.92*x[12]+0.93*x[13]+0.94*x[14]+0.95*x[15]+0.97*x[16]+0.98*x[17]+0.99*x[18]+1*x[19] 
                    >= 10*w[1])

constraints.append(y[0] == 1)



problem = cp.Problem(cp.Maximize(obj_func), constraints)

#problem.solve(solver=cp.CVXOPT,verbose = True) #verbose parameter determines showing/not showing the output
problem.solve(solver=cp.GUROBI,verbose = True)

print("obj_func =")
print(obj_func.value)

print("x= ")
print(x.value)

print("y= ")
print(y.value)

